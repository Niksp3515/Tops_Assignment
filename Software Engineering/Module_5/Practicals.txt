1. Create Table Name : Student and Exam.
Ans:mysql> use tops_dbms;
Database changed
2. Create table given below: Employee and IncentiveTable.
Ans:mysql> create table Employee(emp_id int auto_increment primary key,f_name text,l_name text,salary decimal(15,2),join_date date,department varchar(30));
Query OK, 0 rows affected (0.02 sec)
-->insert into employee values
		(1,"John:,"Abraham",1000000,"2012-01-01 12:00:00","Banking"),
    	 (2,"Michael","Clarke",800000,"2012-01-01 12:00:00","Insurance"),
    	 (3,"Roy","Thomas",700000,"2013-02-01 12:00:00","Banking"),
    	 (4,"Tom","Jose",600000,"2013-02-01 12:00:00","Insurance"),
    	 (5,"Jerry","Pinto",650000,"2013-02-01 12:00:00","Insurance"),
    	 (6,"Philip","Mathew",750000,"2013-02-01 12:00:00","Services"),
    	 (7,"TestName1","123",650000,"2013-01-01 12:00:00","Services"),
    	 (8,"TestName2","Lname%",600000,"2013-02-01 12:00:00","Insurance");
Query OK, 7 rows affected (0.03 sec)
Records: 7  Duplicates: 0  Warnings: 0

-->IncentiveTable:mysql> create table Incentive(emp_ref_id int,Incentive_date date,Incentive_amount decimal(10,2),foreign key(emp_ref_id) references employee(emp_id));
Query OK, 0 rows affected (0.10 sec)
mysql> 	insert into incentive values
		(1,current_date(),5000),
    	(2,"2013-02-01",3000),
    	(3,"2013-02-01",4000),
    	(1,"2013-01-01",4500),
    	 (2,"2013-01-01",3500);
Query OK, 4 rows affected (0.01 sec)
Records: 4  Duplicates: 0  Warnings: 0


3. Get First_Name from employee table using Tom name “Employee Name”.
Ans: select f_name from employee where f_name = 'Tom';

4. Get FIRST_NAME, Joining Date, and Salary from employee table.
Ans:select f_name , join_date , salary from employee;

5. Get all employee details from the employee table order by	First_Name ascending and Salary descending?
Ans: select * from employee order by f_name;

6. Get employee details from employee table whose first name contains ‘J’.
Ans: select * from employee where f_name like 'J%';

7. Get department wise maximum salary from employee table order by.
Ans:mysql> select max(salary),department from employee group by department;

8. salaryascending?
Ans:select * from employee order by salary;

9. Select first_name, incentive amount from employee and incentives table forthose employees who have incentives
and incentive amount greater than 3000.x
Ans:SELECT EMPLOYEE.f_name,incentive.Incentive_amount from employee inner join incentive on employee.emp_id = incentive.emp_ref_id where Incentive_amount > 3000;

10.Create After Insert trigger on Employee table which insert records inviewtable.
Ans: 
DELIMITER $$
CREATE TRIGGER after_employee_insert
AFTER INSERT ON Employee
FOR EACH ROW
BEGIN
    INSERT INTO viewtable (Employee_id, First_Name, Last_Name, Salary, Joining_Date, Department)
    VALUES (NEW.Employee_id, NEW.First_Name, NEW.Last_Name, NEW.Salary, NEW.Joining_Date, NEW.Department);
END;
$$
DELIMITER ;

11. Create table given below: Salesperson and Customer.
Ans: create table Salesperson(S_no int primary key,S_name text,City text,Comm float(10,2));
Query OK, 0 rows affected, 1 warning (0.05 sec)

mysql> insert into salesperson values (1001,"Peel","London",.12);
Query OK, 1 row affected (0.04 sec)
mysql> insert into salesperson values
    	(1002,"Serres","San jose",.13),
    	 (1004,"Motika","London",.11),
    	 (1007,"Rafkin","Barcelona",.15),
    	 (1003,"Axelrod","New York",.1);
Query OK, 4 rows affected (0.04 sec)
Records: 4  Duplicates: 0  Warnings: 0

Customer:create table Customer(Cnm int primary key,C_name text,City text,rating decimal(10,2),S_no int ,foreign key(S_no) references salesperson(S_no));
Query OK, 0 rows affected (0.10 sec)

mysql> insert into customer values
    	 (201,"Hoffman","London",100,1001),
    	(202,"Giovanne","Roe",200,1003),
    	 (203,"liu","San Jose",300,1002),
    	 (204,"Grass","Barcelona",100,1002),
    	 (206,"Clemens","London",300,1007),
    	 (207,"Pereira","Roe",100,1004);
Query OK, 6 rows affected (0.04 sec)
Records: 6  Duplicates: 0  Warnings: 0

13.All orders for more than $1000.
Ans:

14.Names and cities of all salespeople in London with commission above 0.12.
Ans:mysql> select S_name,City from salesperson where City="London" and Comm>0.12;

15.All salespeople either in Barcelona or in London.
Ans: select * from salesperson where City="London" or City="Barcelona";

16. All salespeople with commission between 0.10 and 0.12. (Boundary valuesshould be excluded).
Ans: select * from salesperson where comm between 0.10 and 0.12;

17. All customers excluding those with rating <= 100 unless they are locatedinRome.
Ans:

18. Write a SQL statement that displays all the information about allsalespeople.
Ans:mysql> create table salesman (
    -> salesman_id int,
    -> name text,
    -> city text,
    -> commission decimal(5,2));
Query OK, 0 rows affected (0.03 sec)
mysql> insert into salesman values
    -> (5001,"James Hoog","New York",0.15),
    -> (5002,"Nail knite","paris",0.13),
    -> (5005,"Pit Alex","London",0.11),
    -> (5006,"Mc Lyon","Paris",0.14),
    -> (5007,"Paul Adam","Rome",0.13),
    -> (5003,"Lauson Hen","San Jose",0.12);
Query OK, 6 rows affected (0.01 sec)

19. From the following table, write a SQL query to find orders that are delivered by a salesperson with ID. 5001. 
Return ord_no, ord_date, purch_amt.
Ans: select order_no,order_date,purch_amt from orders where salesman_id = 5001;

mysql> create table orders(
    ->     order_no int primary key,
    ->     purch_amt int,
    ->     order_date date,
    ->     customer_id int,
    ->     salesman_id int,
    ->     foreign key (salesman_id) references salesman(salesman_id));
Query OK, 0 rows affected (0.04 sec)

mysql> INSERT INTO orders  VALUES
    -> (70001, 150.5, '2012-10-05', 3005, 5002),
    -> (70009, 270.65, '2012-09-10', 3001, 5005),
    -> (70002, 65.26, '2012-10-05', 3002, 5001),
    -> (70004, 110.5, '2012-08-17', 3009, 5003),
    -> (70007, 948.5, '2012-09-10', 3005, 5002),
    -> (70005, 2400.6, '2012-07-27', 3007, 5001),
    -> (70008, 5760, '2012-09-10', 3002, 5001),
    -> (70010, 1983.43, '2012-10-10', 3004, 5006),
    -> (70003, 2480.4, '2012-10-10', 3009, 5003),
    -> (70012, 250.45, '2012-06-27', 3008, 5002),
    -> (70011, 75.29, '2012-08-17', 3003, 5007),
    -> (70013, 3045.6, '2012-04-25', 3002, 5001);
Query OK, 12 rows affected (0.01 sec)
Records: 12  Duplicates: 0  Warnings: 0

20. From the following table, write a SQL query to select a range of products whose price is in the range Rs.200 to 
Rs.600. Begin and end values are included. Return pro_id, pro_name, pro_price, and pro_com.
Ans:select * from products where pro_price between 200 and 600;

21. From the following table, write a SQL query to calculate the averageprice for a manufacturer code of 16. Return avg.
Ans:SELECT AVG(PRO_PRICE) AS AVERAGE_PRICE FROM PRODUCTS WHERE PRO_COM=16;

22. From the following table, write a SQL query to calculate the averageprice for a manufacturer code of 16. Return avg.
Ans:select PRO_NAME AS ITEM_NAME , PRO_PRICE AS PRICE_IN_RS from products;

23. From the following table, write a SQL query to find the items whose prices are higher than or equal to $250. Order the result by product price indescending, then product name in ascending. Return pro_name and pro_price.
Ans: select * from products where PRO_PRICE>=250 order by PRO_PRICE DESC;
 SELECT * FROM PRODUCTS ORDER BY PRO_NAME;

24. From the following table, write a SQL query to calculate average price of the items for each company. Return average price and companycode.
Ans:SELECT AVG(PRO_PRICE) AS AVERAGE_PRICE,PRO_COM FROM  PRODUCTS GROUP BY PRO_COM;